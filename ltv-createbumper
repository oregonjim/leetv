#!/usr/bin/python3
# -*- coding: utf-8 -*-
""" Add moving text to LeeTV bumper videos """
# pylint: disable=C0103,C0301,R0912,R0914,R0915,R1702, W0611
#######################################################################
#
# Copyright Â© 2018 Jim Lee <jlee54@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################
#
#  ltv-createbumper
#
#  A leetv utility program
#
#  Create bumper and reset videos
#  from still images and audio files
#
#  Last update: 2018-06-13
#
import sys
import os
import argparse

import numpy as np
from moviepy.editor import *  # pylint: disable=unused-wildcard-import
from moviepy.video.tools.segmenting import findObjects

from leeutils import get_script_directory


def validate_directory(directory):
    """ check for directory, exit if not present """
    if not os.path.exists(directory):
        print("Directory {} does not exist".format(os.path.abspath(directory)))
        sys.exit(1)



def moveLetters(letters, funcpos):
    """ animate the letters """
    return [letter.set_pos(funcpos(letter. screenpos, i, len(letters)))
            for i, letter in enumerate(letters)]


def cascade(screenpos, i, nletters):
    """ drop letters in """
    v = np.array([0, -1])
    d = lambda t: 1 if t < 0 else abs(np.sinc(t) / (1+t**4))
    return lambda t: screenpos + v * 400 * d(t - 0.15 * i)


def arrive(screenpos, i, nletters):
    """ scroll letters in """
    v = np.array([-1, 0])
    d = lambda t: max(0, 3-3 * t)
    return lambda t: screenpos - 400 * v * d(t - 0.2 * i)


def vortexin(screenpos, i, nletters):
    """ swirl lettter in """
    d = lambda t: 1.0 / (0.3 + t**8)  # damping
    a = i * np.pi / nletters  # angle of the movement
    v = rotMatrix(a).dot([-1, 0])
    if i % 2:
        v[1] = -v[1]
    return lambda t: screenpos+400*d(t)*rotMatrix(0.5*d(t)*a).dot(v)


def vortexout(screenpos, i, nletters):
    """ swirl letters out """
    d = lambda t: max(0, t)  # damping
    a = i * np.pi / nletters  # angle of the movement
    v = rotMatrix(a).dot([-1, 0])
    if i % 2:
        v[1] = -v[1]
    return lambda t: screenpos + 400 * d(t-0.1 * i) * rotMatrix(-0.2 * d(t) * a).dot(v)


# helper function
rotMatrix = lambda a: np.array([[np.cos(a), np.sin(a)],
                                [-np.sin(a), np.cos(a)]])


def main(reset):
    """ main entry point """
    os.chdir(get_script_directory())
    d = os.path.join(os.getenv('HOME'), '.leetv')
    validate_directory(d)

    # screensize = (720,460)
    bumper = VideoFileClip("bumper-raw.mp4")
    w, h = screensize = bumper.size
    print(w, h)
    txtClip = TextClip('LeeTV', color='yellow', font="Bitstream-Vera-Sans-Bold",
                       kerning=5, fontsize=100)

    txtClip2 = TextClip('Commercial\nReset', color='orange', font="Bitstream-Vera-Sans-Bold",
                        kerning=-1, fontsize=100)

    # print(txtClip.list('color'))
    # print(txtClip.list('font'))
    # cvc = CompositeVideoClip( [txtClip.set_pos(('right', 'bottom'))],
    #                         size=screensize)

    # cvc2 = CompositeVideoClip( [txtClip2.set_pos(('left', 'top'))],
    #                         size=screensize)

    if reset:
        # reset video
        cvc = CompositeVideoClip([txtClip2.set_pos(('left', 'top')), txtClip.set_pos(('right', 'bottom'))],
                                 size=screensize)
    else:
        # bumper video
        cvc = CompositeVideoClip([txtClip.set_pos(('right', 'bottom'))],
                                 size=screensize)
    cvc.duration = 5
    # use the plugin findobjects to locate and separate each letter
    letters = findObjects(cvc)  # a list of ImageClips
    # letters2 = findObjects(cvc2)

    # clips = [ CompositeVideoClip( moveLetters(letters,funcpos),
    #                               size = screensize).subclip(0,5)
    #           for funcpos in [vortexin, cascade, arrive, vortexout] ]

    # concatenate everything and write to a file

    # text_clip = concatenate_videoclips(clips)
    text_clip = CompositeVideoClip(moveLetters(letters, vortexin), size=screensize)
    # text_clip2 = CompositeVideoClip(moveLetters(letters2, vortexin), size=screensize)

    final_clip = CompositeVideoClip([bumper, text_clip])
    final_clip.duration = 5
    if reset:
        final_clip.write_videofile(os.path.join(d, 'reset.mp4'), fps=25, codec='mpeg4')
    else:
        final_clip.write_videofile(os.path.join(d, 'bumper.mp4'), fps=25, codec='mpeg4')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Create leetv bumper video (or commercial reset video)")
    parser.add_argument("-r", "--reset", action="store_true", help="generate commercial reset video")
    args = parser.parse_args()
    rarg = args.reset
    sys.exit(main(rarg))
