#!/usr/bin/python3
# -*- coding: utf-8 -*-
#
#######################################################################
#
# Copyright Â© 2018 Jim Lee
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################
#
#  ltv-listallmedia
#
#  A leetv utility program
#
#  Last update: 2018-05-31
#
#  Create all media file lists for leetv.  Also warns of directories
#  not present in the list (and vice-versa).
#
#  NOTE NOTE NOTE: the tables must be customized for your particular
#  collection of media files.  Alternatively, you can use another program,
#  ltv-listmedia, to generate/update individual media lists.  This program
#  is more useful for large, frequently updated collections.
#
#  File format:  videoFilename : DurationInMilliseconds <newline>
#
#  File names are pre-parsed (url-quoted) for use in various playlist formats
#
#  USAGE:    ltv-listallmedia [-q]
#
import sys
import os
import argparse
import urllib.parse
import subprocess
import json
import re

from leeutils import *


basetv = "/mnt/tv/Television"
basecartoon = "/mnt/tv/Cartoons"
basemovie = "/mnt/movies"

movielist = (
             ["Movies/", "MovieNight"],
             ["More Movies/", "MoreMovies"],
             ["Holiday/", "HolidayMovies"]
             )

tvlist = (
            ["Addams Family/", "AddamsFamily"],
            ["Alfred Hitchcock Presents/", "AlfredHitchcock"],
            ["All In The Family/", "AllInTheFamily"],
            ["America's Funniest Home Videos/", "AFV"],
            ["Andy Griffith/", "AndyGriffith"],
            ["Banana Splits/", "BananaSplits"],
            ["Barney Miller/", "BarneyMiller"],
            ["Batman/", "Batman"],
            ["Battlestar Galactica/", "BattlestarGalactica"],
            ["Baywatch/", "Baywatch"],
            ["Beat the Clock/", "BeatTheClock"],
            ["Benson/", "Benson"],
            ["Beverly Hillbillies/", "BeverlyHillbillies"],
            ["Bewitched/", "Bewitched"],
            ["Big Bang Theory/", "BigBangTheory"],
            ["Bob Newhart/", "BobNewhart"],
            ["Bosom Buddies/", "BosomBuddies"],
            ["Brady Bunch/", "BradyBunch"],
            ["Card Sharks/", "CardSharks"],
            ["Cheers/", "Cheers"],
            ["Chico and the Man/", "ChicoAndTheMan"],
            ["CHiPs/", "Chips"],
            ["Columbo/", "Columbo"],
            ["Commercials/", "Commercials"],
            ["Daniel Boone/", "DanielBoone"],
            ["Dennis the Menace/", "DennisTheMenace"],
            ["Dick Van Dyke/", "DickVanDyke"],
            ["Diff'rent Strokes/", "DifferentStrokes"],
            ["Dinosaurs/", "Dinosaurs"],
            ["Donny and Marie/", "DonnyAndMarie"],
            ["Dukes of Hazzard/", "DukesOfHazzard"],
            ["Everybody Loves Raymond/", "EverybodyLovesRaymond"],
            ["Facts of Life/", "FactsOfLife"],
            ["Family Feud/", "FamilyFeud"],
            ["Family Matters/", "FamilyMatters"],
            ["Family Ties/", "FamilyTies"],
            ["Fantasy Island/", "FantasyIsland"],
            ["Fawlty Towers/", "FawltyTowers"],
            ["Flipper (1964)/", "Flipper"],
            ["Flying Nun/", "FlyingNun"],
            ["Frasier/", "Frasier"],
            ["Fresh Prince of Bel-Air/", "FreshPrince"],
            ["Friends/", "Friends"],
            ["Full House/", "FullHouse"],
            ["F Troop/", "FTroop"],
            ["Game Shows/", "GameShows"],
            ["Get Smart/", "GetSmart"],
            ["Ghost and Mrs. Muir/", "GhostAndMrsMuir"],
            ["Gidget/", "Gidget"],
            ["Gilligan's Island/", "GilligansIsland"],
            ["Gomer Pyle USMC/", "GomerPyle"],
            ["Good Times/", "GoodTimes"],
            ["Green Acres/", "GreenAcres"],
            ["Growing Pains/", "GrowingPains"],
            ["Gunsmoke/", "Gunsmoke"],
            ["Happy Days/", "HappyDays"],
            ["Hee Haw/", "HeeHaw"],
            ["Hill Street Blues/", "HillStreetBlues"],
            ["Hogan's Heroes/", "HogansHeroes"],
            ["Hollywood Squares/", "HollywoodSquares"],
            ["Home Improvement/", "HomeImprovement"],
            ["Honeymooners/", "Honeymooners"],
            ["Honey West/", "HoneyWest"],
            ["H.R. Pufnstuf/", "HRPufnstuf"],
            ["I Dream of Jeannie/", "IDreamOfJeannie"],
            ["Jack Benny/", "JackBenny"],
            ["King of Queens/", "KingOfQueens"],
            ["Knight Rider/", "KnightRider"],
            ["Kung Fu/", "KungFu"],
            ["Land of the Giants/", "LandOfTheGiants"],
            ["Lassie/", "Lassie"],
            ["Last Man Standing (2011)/", "LastManStanding"],
            ["Laurel & Hardy/", "LaurelAndHardy"],
            ["Laverne & Shirley/", "LaverneAndShirley"],
            ["Leave It To Beaver/", "LeaveItToBeaver"],
            ["Let's Make A Deal/", "LetsMakeADeal"],
            ["Little House on the Prairie/", "LittleHouseOnThePrairie"],
            ["Logan's Run/", "LogansRun"],
            ["Lost In Space/", "LostInSpace"],
            ["Love Boat/", "LoveBoat"],
            ["Lucy Show/", "LucyShow"],
            ["Mary Tyler Moore/", "MaryTylerMoore"],
            ["MASH/", "MASH"],
            ["Match Game/", "MatchGame"],
            ["Mayberry RFD/", "MayberryRFD"],
            ["McHale's Navy/", "McHalesNavy"],
            ["Misc/", "MiscTV"],
            ["Mission Impossible/", "MissionImpossible"],
            ["Mister Ed/", "MisterEd"],
            ["Mister Rogers/", "MisterRogers"],
            ["Monk/", "Monk"],
            ["Monty Python's Flying Circus/", "MontyPython"],
            ["Mork & Mindy/", "MorkAndMindy"],
            ["Mr Wizard/", "MrWizard"],
            ["Munsters/", "Munsters"],
            ["Mutual of Omaha's Wild Kingdom/", "MutualOfOmaha"],
            ["My Favorite Martian/", "MyFavoriteMartian"],
            ["My Three Sons/", "MyThreeSons"],
            ["Newhart/", "Newhart"],
            ["Odd Couple/", "OddCouple"],
            ["One Day at a Time/", "OneDayAtATime"],
            ["Partridge Family/", "PartridgeFamily"],
            ["Password/", "Password"],
            ["Petticoat Junction/", "PetticoatJunction"],
            ["Phil Silvers Show/", "PhilSilvers"],
            ["Planet of the Apes/", "PlanetOfTheApes"],
            ["Police Squad/", "PoliceSquad"],
            ["Quark/", "Quark"],
            ["Rhoda/", "Rhoda"],
            ["Rockford Files/", "RockfordFiles"],
            ["Room 222/", "Room222"],
            ["Sanford and Son/", "SanfordAndSon"],
            ["Smothers Brothers/", "SmothersBrothers"],
            ["Soap/", "Soap"],
            ["Space 1999/", "Space1999"],
            ["Star Trek TOS/", "StarTrek"],
            ["Survivors/", "Survivors"],
            ["Tattletales/", "Tattletales"],
            ["Taxi/", "Taxi"],
            ["The Adventures of Ozzie and Harriet/", "OzzieAndHarriet"],
            ["The Best of the Dean Martin Show/", "DeanMartin"],
            ["The Carol Burnett Show/", "CarolBurnett"],
            ["The Golden Girls/", "GoldenGirls"],
            ["The Gong Show/", "GongShow"],
            ["The Jeffersons/", "Jeffersons"],
            ["The Life of Riley (1953)/", "LifeOfRiley"],
            ["The Office (US)/", "Office"],
            ["The Paper Chase/", "PaperChase"],
            ["The Price is Right/", "PriceIsRight"],
            ["The Starlost (1973)/", "Starlost"],
            ["Three's Company/", "ThreesCompany"],
            ["Three Stooges/", "ThreeStooges"],
            ["Time Tunnel/", "TimeTunnel"],
            ["Tremors/", "Tremors"],
            ["Twilight Zone/", "TwilightZone"],
            ["UFO/", "UFO"],
            ["Undersea World of Jacques Cousteau/", "JacquesCousteau"],
            ["Waltons/", "Waltons"],
            ["Welcome Back Kotter/", "WelcomeBackKotter"],
            ["What's My Line/", "WhatsMyLine"],
            ["Whose Line is it Anyway/", "WhoseLineIsItAnyway"],
            ["Wild Wild West/", "WildWildWest"],
            ["Wings/", "Wings"],
            ["WKRP In Cincinnati/", "WKRP"],
            ["Wonderful World of Disney/", "WWOD"]
            )

cartoonlist = (
                ["Bob's Burgers/", "BobsBurgers"],
                ["Bump in the Night/", "BumpInTheNight"],
                ["Chip and Dale/", "ChipAndDale"],
                ["Fat Albert and the Cosby Kids/", "FatAlbert"],
                ["Hillbilly Bears/", "HillbillyBears"],
                ["Huckleberry Hound/", "HuckleberryHound"],
                ["King of the Hill/", "KingOfTheHill"],
                ["Looney Tunes/", "LooneyTunes"],
                ["Marvin the Martian/", "MarvinTheMartian"],
                ["Misc/", "MiscCartoons"],
                ["Peanuts/", "Peanuts"],
                ["Peter Potamus and His Magic Flying Balloon/", "PeterPotamus"],
                ["Pink Panther/", "PinkPanther"],
                ["Pixie & Dixie/", "PixieAndDixie"],
                ["Road Runner/", "RoadRunner"],
                ["Rocky and Bullwinkle/", "RockyAndBullwinkle"],
                ["Scooby Doo, Where Are You/", "ScoobyDoo"],
                ["Secret Squirrel/", "SecretSquirrel"],
                ["Simpsons/", "Simpsons"],
                ["Snagglepuss/", "Snagglepuss"],
                ["Speed Racer/", "SpeedRacer"],
                ["Tennessee Tuxedo/", "TennesseeTuxedo"],
                ["The Yogi Bear Show/", "YogiBear"],
                ["Tom and Jerry/", "TomAndJerry"],
                ["Top Cat/", "TopCat"],
                ["Touche Turtle and Dumm Dumm/", "ToucheTurtle"],
                ["Underdog/", "Underdog"],
                ["Unsorted/", "UnsortedCartoons"],
                ["Woody Woodpecker/", "WoodyWoodpecker"],
                )

log = ''


def natural_sort(x):
    return [int(y) if y.isdigit() else y for y in re.split(r'(\d+)', x)]


def validate_directory(directory):
    global log
    if not os.path.exists(directory):
        log.error("Directory {} does not exist".format(os.path.abspath(directory)))


def duration(file, precision=3):
    global log
    result = subprocess.Popen(' '.join(['ffprobe',
                                        '-print_format json',
                                        '-show_format',
                                        '-hide_banner',
                                        re.escape(file)]),
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT,
                              shell=True)
    output = ''
    for x in result.stdout.readlines():
        try:
            output += x.decode('utf-8')
        except UnicodeDecodeError:
            pass

    # output = ''.join(result.stdout.readlines())
    meta = json.loads(output[output.find('{'): output.rfind('}') + 1])
    duration = float(meta['format']['duration'])
    duration = round(duration, precision) * 10 ** precision
    return int(duration)


def is_video(file):
    global log
    video_extensions = ('.mp4', '.m4v', '.mkv', '.avi', '.ogm', '.mov',
                        '.divx', '.ogv', '.webm', '.3gp', '.rmvb',
                        '.mpg', '.mpeg', '.vob', '.asf', '.wmv', '.flv')
    common_extensions = ('.jpg', '.png', '.nfo', '.txt', '.iso', '.zip', '.pdf')

    # ignore videos whose filename begins with '99'
    if os.path.basename(file).startswith('99'):
        return False

    skipdir = os.sep + '99'
    # also ignore directories that begin with '99'
    if skipdir in file:
        return False

    x = os.path.splitext(file)[1].lower() in video_extensions

    if not x:
        if not os.path.splitext(file)[1].lower() in common_extensions:
            log.warning("File {} is not an expected file.".format(file))
    return x


def create_list(directory, name):
    global log

    validate_directory(directory)
    log.info("Reading directory {}".format(directory))
    files = [os.path.abspath(os.path.join(dirpath, file))
             for (dirpath, dirnames, filenames) in os.walk(directory)
             for file in filenames]
    videos = list(filter(is_video, files))
    videos.sort(key=natural_sort)
    number_of_videos = len(videos)
    log.info("{} videos found".format(number_of_videos))

    if number_of_videos == 0:
        log.error("No videos found in {}".format(directory))

    try:
        flname = os.path.join(os.getenv('HOME'), '.leetv', 'media', name + '.lst')
        filelist = open(flname, 'w')
        log.info("Creating media file list {}".format(flname))
    except IOError:
        log.error("Unable to create file: {}".format(flname))

    count = 0
    for i in range(number_of_videos):
        length = 0
        try:
            log.info("Probing video {} of {} : {}".format(i + 1,
                                                          number_of_videos,
                                                          videos[i]))
            video = urllib.parse.quote(videos[i])
            length = duration(videos[i])

            if length:
                filelist.write('{} : {}\n'.format(video, length))
                count += 1
            else:
                log.warning("Unable to get duration for {}".format(videos[i]))
        except KeyError:
            log.warning("Video {} : {} is invalid".format(i, videos[i]))
            continue

    filelist.close()
    log.info("{} videos added to the filelist {}".format(count, name))


def main(quiet):
    global log
    if quiet:
        log = Log(level='WARNING')
    else:
        log = Log(level='INFO')

    press_enter = "Press enter to continue anyway, ^C to exit\n"

    # first, check for any directories below the base tv directory
    # that are not represented in the list above
    # this means I added a new series on disk (or renamed one)
    # but forgot to add it to the list above
    for name in os.listdir(basetv):
        full =  name + os.sep
        found = False
        for i, entry in enumerate(tvlist):
            if full in entry[0]:
                found = True
        if not found:
            log.warning("Directory {} not found in list!".format(full))
            try:
                # since the whole process can take a long time,
                # I may want to abort and fix the list before
                # continuing
                input(press_enter)
            except KeyboardInterrupt:
                sys(exit(1))

    # do the same for the cartoons
    for name in os.listdir(basecartoon):
        full =  name + os.sep
        found = False
        for i, entry in enumerate(cartoonlist):
            if full in entry[0]:
                found = True
        if not found:
            log.warning("Directory {} not found in list!".format(full))
            try:
                input(press_enter)
            except KeyboardInterrupt:
                sys(exit(1))

    # no need to check the movies since I keep them all in a single tree


    # now, check for any list items that don't exist on disk.
    # (inverse of above checks)
    for dir, name in tvlist:
        path = os.path.join(basetv, dir)
        if not os.path.exists(path):
            log.warning("Directory {} doesn't exist!".format(path))
            try:
                input(press_enter)
            except KeyboardInterrupt:
                sys(exit(1))

    for dir, name in cartoonlist:
        path = os.path.join(basecartoon, dir)
        if not os.path.exists(path):
            log.warning("Directory {} doesn't exist!".format(path))
            try:
                input(press_enter)
            except KeyboardInterrupt:
                sys(exit(1))

    try:
        input("All directories and lists accounted for.  Press enter to create lists, ^C to exit:\n")
    except KeyboardInterrupt:
        sys(exit(1))

    # now, create all the media list files
    numlists = 0
    for dir, name in tvlist:
        path = os.path.join(basetv, dir)
        log.info("Processing {} : {}".format(name, path))
        create_list(path, name)
        numlists += 1

    for dir, name in cartoonlist:
        path = os.path.join(basecartoon, dir)
        log.info("Processing {} : {}".format(name, path))
        create_list(path, name)
        numlists += 1

    for dir, name in movielist:
        path = os.path.join(basemovie, dir)
        log.info("Processing {} : {}".format(name, path))
        create_list(path, name)
        numlists += 1

    log.info("Finished. {} media lists created.".format(numlists))

    return 0

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Create leetv media file list")
    parser.add_argument("-q", "--quiet", default=False, action="store_true", help="no messages")
    args = parser.parse_args()
    quiet = args.quiet
    sys.exit(main(quiet))
