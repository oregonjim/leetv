#!/usr/bin/python3
# -*- coding: utf-8 -*-
# pylint: disable=C0103,C0301,R0912,R0914,R0915,R1702
#
#######################################################################
#
# Copyright Â© 2018 Jim Lee
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#######################################################################
#
#  ltv-config
#
#  A leetv utility program
#
#  Graphical configuration/schedule editor for leetv
#
#  Last update: 2018-06-05
#

# system libraries
import sys
import os
import urllib.parse
from datetime import date, datetime
import time
from configparser import ConfigParser

# third-party libraries
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *

# local modules
from leeutils import *


__version__ = '2.00'


class FileList:
    """
    gathers all media lists together for scheduling
    along with min/max/avg video length per series
    """
    directory = ''
    series_list = []

    def __init__(self):
        self.directory = os.path.join(os.getenv('HOME'), '.leetv', 'media')
        for series_file in filewalk(self.directory):
            # collect all the media lists
            if series_file.endswith('.lst'):
                fn, ft = self.get_filelist(series_file)
                min = 99999999
                max = 0
                minname = ''
                maxname = ''
                total = 0
                # for each filename in a single media list
                for i, name in enumerate(fn):
                    # convert ms to minutes
                    runtime = int(ft[i]) / 1000 / 60
                    # calc min/max/avg
                    total += runtime
                    if runtime > max:
                        max = runtime
                        maxname = name
                    if runtime < min:
                        min = runtime
                        minname = name
                s = os.path.basename(series_file)
                minname = urllib.parse.unquote(os.path.basename(minname))
                maxname = urllib.parse.unquote(os.path.basename(maxname))
                self.series_list.append([s.replace('.lst',''),
                                        round(total / len(fn), 2),
                                        round(min, 2),
                                        minname,
                                        round(max, 2),
                                        maxname])
        self.series_list.sort()
        self.series_list.append(['blank', 0, 0, '', 0, ''])

    def get_filelist(self, filename, shuffle=False):
        f = list()
        t = list()

        if not os.path.isfile(filename):
            print('{} does not exist!'.format(filename))
            sys.exit(1)

        with open(filename, 'r') as fp:
            lst = fp.readlines()
            if shuffle:
                random.shuffle(lst)
            for x in lst:
                a, b = x.split(':')
                f.append(a.strip())
                t.append(b.strip())
            return (f, t)

class ConfigEditor(QWidget):
    '''
    Main GUI for LeeTV Schedule Editor
    '''

    days=('mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun')

    # tuple of 1/2 hour time slots in a day - 24hr time format
    times = ('0000', '0030', '0100', '0130', '0200', '0230',
             '0300', '0330', '0400', '0430', '0500', '0530',
             '0600', '0630', '0700', '0730', '0800', '0830',
             '0900', '0930', '1000', '1030', '1100', '1130',
             '1200', '1230', '1300', '1330', '1400', '1430',
             '1500', '1530', '1600', '1630', '1700', '1730',
             '1800', '1830', '1900', '1930', '2000', '2030',
             '2100', '2130', '2200', '2230', '2300', '2330')

    names = []
    seqs = []
    lbl = []
    ser = []
    seq = []
    r = []
    s = None
    last_checked = 99
    confirmation_flag = False

    # colors are in HTML '#RRGGBB' format
    colors = {
          'red': '#ff0000',
          'medred': '#cf0000',
          'darkred': '#3f0000',
          'green': '#00ff00',
          'medgreen': '#00cf00',
          'darkgreen': '#003f00',
          'blue': '#0000ff',
          'medblue': '#0000cf',
          'darkblue': '#00003f',
          'yellow': '#ffff00',
          'gold': '#ffd700',
          'pink': '#ffc0cb',
          'bisque': '#ffe4c4',
          'ivory': '#fffff0',
          'black': '#000000',
          'white': '#ffffff',
          'lightgrey': '#909090',
          'darkgrey': '#3f3f3f',
          'grey': '#7f7f7f',
          'violet': '#ee82ee',
          'silver': '#c0c0c0',
          'forestgreen': '#228b22',
          'brown': '#a52a3a',
          'chocolate': '#d2691e',
          'azure': '#fffff0',
          'orange': '#ffa500'
         }


    def __init__(self):
        super().__init__()

        self.initUI()


    def initUI(self):

        grid = QGridLayout()
        grid.setSpacing(10)

        # get all of our media list names to populate the comboboxes with
        self.s = FileList()

        # picklist for series comboboxes
        for i in self.s.series_list:
            self.names.append(i[0])

        # picklist for sequence comboboxes
        self.seqs.append('linear')
        self.seqs.append('random')
        for i in range(2, 48):
            self.seqs.append(str(i))

        # clear and save buttons
        b1 = QPushButton('Clear')
        grid.addWidget(b1, 0, 0)
        b1.pressed.connect(self.clear_sc)
        b2 = QPushButton('Save')
        grid.addWidget(b2, 0, 5)
        b2.pressed.connect(self.set_sc)

        # radiobuttons to select day of week
        self.r.append(QRadioButton('Mon'))
        grid.addWidget(self.r[0], 0, 1)
        self.r[0].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Tue'))
        grid.addWidget(self.r[1], 0, 2)
        self.r[1].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Wed'))
        grid.addWidget(self.r[2], 0, 3)
        self.r[2].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Thu'))
        grid.addWidget(self.r[3], 0, 4)
        self.r[3].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Fri'))
        grid.addWidget(self.r[4], 1, 1)
        self.r[4].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Sat'))
        grid.addWidget(self.r[5], 1, 2)
        self.r[5].toggled.connect(self.get_sc)
        self.r.append(QRadioButton('Sun'))
        grid.addWidget(self.r[6], 1, 3)
        self.r[6].toggled.connect(self.get_sc)

        # create grid of 96 time slot combo boxes with labels
        # 48 time slot labels
        # 48 series boxes
        # 48 sequence boxes

        # time slot labels
        for col in range(6):
            for row in range(8):
                idx = col * 8 + row
                # convert 24hr to am/pm
                if idx > 23:
                    if idx > 25:
                        hr = self.times[idx - 24][0:2]
                    else:
                        hr = self.times[idx][0:2]
                    mn = self.times[idx][2:] + 'pm'
                else:
                    hr = self.times[idx][0:2]
                    mn = self.times[idx][2:] + 'am'
                if hr.startswith('0'):
                    hr = ' ' + hr[1:]
                txt = '[{}]   {}:{}'.format(self.times[idx], hr, mn)
                self.lbl.append(QLabel(txt))
                grid.addWidget(self.lbl[idx], 2+row*3, col)
                self.lbl[idx].setStyleSheet('color: {}'.format(self.colors['lightgrey']))

        # series boxes
        for col in range(6):
            for row in range(8):
                idx = col * 8 + row
                self.ser.append(QComboBox())
                grid.addWidget(self.ser[idx], 2+row*3+1, col)
                model = self.ser[idx].model()
                # color code according to avg episode length
                for i, item in enumerate(self.names):
                    entry = QStandardItem(item)
                    entry.setForeground(QColor(self.colorcode_entries(i)))
                    model.appendRow(entry)

        # set up callback AFTER all widgets are created
        for idx in range(48):
            self.ser[idx].currentIndexChanged.connect(self.combo_changed)
            #self.ser[idx].highlighted.connect(self.combo_changed)

        # sequence boxes
        for col in range(6):
            for row in range(8):
                idx = col * 8 + row
                self.seq.append(QComboBox())
                grid.addWidget(self.seq[idx], 2+row*3+2, col)
                for item in self.seqs:
                    self.seq[idx].addItem(item)

        # set default schedule to Monday
        # by toggling 'Monday' radiobutton
        self.r[0].toggle()

        self.setLayout(grid)
        self.setWindowTitle('LeeTV Schedule Editor v{}'.format(__version__))
        self.show()

    def get_schedule(self, day):
        ''' read schedule for day into comboboxes '''
        sched_file = os.path.join(os.getenv('HOME'), '.leetv', 'sched', day + '.ini')
        sched = ConfigParser()
        sched.read(sched_file)

        for i, slot in enumerate(self.times):
            self.ser[i].setCurrentText(sched.get(slot, 'series', fallback='error'))
            self.seq[i].setCurrentText(sched.get(slot, 'seq', fallback='error'))

    def set_schedule(self, day):
        ''' save schedule in comboboxes to ini file '''
        sched_file = os.path.join(os.getenv('HOME'), '.leetv', 'sched', day + '.ini')
        # sched_file = day + '.test'
        sched = ConfigParser()
        for i, slot in enumerate(self.times):
            sched.add_section(slot)
            sched.set(slot, 'series', self.ser[i].currentText())
            sched.set(slot, 'seq', self.seq[i].currentText())
            with open(sched_file, 'w') as fp:
                sched.write(fp)

    def get_sc(self):
        ''' called when radiobutton selected '''
        for i, day in enumerate(self.days):
            if self.r[i].isChecked():
                if not i == self.last_checked:
                    self.last_checked = i
                    self.get_schedule(day)

    def set_sc(self):
        ''' called when save button clicked '''
        for i, day in enumerate(self.days):
            if self.r[i].isChecked():
                if self.confirmation_dialog(day):
                    self.set_schedule(day)

    def clear_sc(self):
        ''' called when clear button clicked '''
        # set all series boxes to last item ('blank')
        # set all seq boxes to 'linear'
        lastslot = len(self.names) - 1
        for idx in range(48):
            self.ser[idx].setCurrentIndex(lastslot)
            self.seq[idx].setCurrentIndex(0)

    def combo_changed(self, idx):
        ''' combobox callback - colorcode text '''
        for i in range(48):
            if self.ser[i].currentIndex() == idx:
                color = self.colorcode_entries(self.ser[i].currentIndex())
                self.ser[i].setStyleSheet("QComboBox:editable{{ color: {} }}".format(color))

    def colorcode_entries(self, index):
        '''
        set color of combobox text fields
        based on average episode length:
        '''
        idx = self.s.series_list[index]
        if idx[0] == 'blank':
            # 'blank' has no length
            return self.colors['black']
        elif idx[1] < 30:
            # fits in 1/2 hour slot
            return self.colors['medgreen']
        elif idx[1] >= 30 and idx[1] < 60:
            # fits in two 1/2 hour slots
            return self.colors['medblue']
        else:
            # longer than an hour
            return self.colors['medred']

    def confirmation_dialog(self, day):
        ''' give user a chance to abort save '''
        def ok_pressed():
            self.confirmation_flag = True
            d.accept()

        def cancel_pressed():
            self.confirmation_flag = False
            d.reject()

        d = QDialog()
        g = QGridLayout()
        g.setSpacing(10)
        l1 = QLabel('Overwrite {}.ini?'.format(day))
        b1 = QPushButton("Ok",d)
        b2 = QPushButton("Cancel",d)
        b1.pressed.connect(ok_pressed)
        b2.pressed.connect(cancel_pressed)
        g.addWidget(l1, 0, 0)
        g.addWidget(b1, 1, 0)
        g.addWidget(b2, 1, 1)
        d.setWindowTitle("Save Schedule")
        d.setLayout(g)
        d.setWindowModality(Qt.ApplicationModal)
        d.exec_()
        return self.confirmation_flag


def main():

    app = QApplication(sys.argv)
    #app.setStyle('cleanlooks')
    c = ConfigEditor()

    return app.exec_()


if __name__ == '__main__':
    sys.exit(main())

